#!/system/bin/sh

display_usage() { 
	echo "usage: dss {enable|disable} {user|system} [package] ($1)"
} 

if [ ! -e /data/.dss.hasran ]; then
    touch /data/.dss.hasran
    echo "You are running this script for the first time."
    echo "If you apply this script for 'system' apps, it might cause Google Play-systemupdate to fail and reboot."
    echo "In that case, do not forget to run this script with 'enable' BEFORE applying the Google-Play systemupdate."
    echo "You won't see this message when you run the script again."
    exit 0
fi

if [  $# -ne 2 ] && [ $# -ne 3 ]; then 
		display_usage "needs 2 or 3 arguments"
		exit 1
fi

if [ "$1" != "enable" ] && [ "$1" != "disable" ]; then
    display_usage "first argument must be 'enable' or 'disable'"
    exit 1
fi

if [ "$2" != "user" ] && [ "$2" != "system" ]; then
    display_usage "second argument must be 'user' or 'system'"
    exit 1
fi

# use -e flag to filter only "enabled" packages
# use -3 flag to filter only "3rd party" packages
# use -s flag to filter only "system" packages

if [ "$2" == "user" ]; then
    FLAG="-3"
else
    FLAG="-s"
fi

PLIST=`/system/bin/cmd package list packages -e $FLAG | grep -v Swift | sort | sed 's/package://g'`

if [ $# -eq 3 ]; then
    if echo $PLIST | /system/bin/grep --quiet "$3"; then
        PLIST=( $3 )
    else
        display_usage "third argument [$3]: package does not exist"
        exit 1
    fi
fi

CMD="$1"

if [ "$1" == "enable" ]; then
    CMD=enable
else
    if [ "$1" == "disable" ]; then
        CMD=disable
    else
        CMD=enable
    fi
fi

DCNT=0
ECNT=0
ERR=0

dodis () {
    pm "$1" "$2" 2>/dev/null
    if [ $? -eq 0 ]; then
        if [ "$1" = "enable" ]; then
            ECNT=$(( ECNT + 1 ))
        else
            DCNT=$(( DCNT + 1 ))
        fi
    else
        ERR=$(( ERR + 1))
    fi
}

if [ "$3" == "com.google.android.apps.messaging" ]; then
    # disable MMS and RCS
    dodis $CMD "com.google.android.apps.messaging/android.support.v7.mms.MmsService"
    dodis $CMD "com.google.android.apps.messaging/com.google.android.apps.messaging.rcsmigration.RcsMigrationService"
    dodis $CMD "com.google.android.apps.messaging/com.google.android.apps.messaging.rcsprovisioning.RcsProvisioningBroadcastReceiver"
    dodis $CMD "com.google.android.apps.messaging/com.google.android.apps.messaging.shared.rcs.messaging.MessagingEngineNotificationServer"
    dodis $CMD "com.google.android.apps.messaging/com.google.android.apps.messaging.shared.receiver.IncomingRcsEventReceiver"
    dodis $CMD "com.google.android.apps.messaging/com.google.android.apps.messaging.shared.receiver.RcsProvisioningEventReceiver"
    dodis $CMD "com.google.android.apps.messaging/com.google.android.apps.messaging.ui.appsettings.RcsSettingsActivity"
    dodis $CMD "com.google.android.apps.messaging/com.google.android.apps.messaging.ui.rcs.setup.auto.RcsPromoActivity"
    dodis $CMD "com.google.android.apps.messaging/com.google.android.apps.messaging.ui.rcs.setup.manual.RcsSetupActivity"
fi

if [ $# -eq 2 ]; then
    # specific disables for various packages

    if echo $PLIST | /system/bin/grep --quiet "com.dvtonder.chronus"; then
        dodis $CMD "com.dvtonder.chronus/com.dvtonder.chronus.daydream.ChronusDaydreamService"
        dodis $CMD "com.dvtonder.chronus/com.dvtonder.chronus.daydream.ChronusDaydreamServicePro"
        dodis $CMD "com.dvtonder.chronus/com.dvtonder.chronus.news.NewsFeedViewsService"
        dodis $CMD "com.dvtonder.chronus/com.dvtonder.chronus.tasks.TasksViewsService"
        dodis $CMD "com.dvtonder.chronus/com.dvtonder.chronus.stocks.StocksViewsService"
        dodis $CMD "com.dvtonder.chronus/com.dvtonder.chronus.extensions.gmail.GmailExtension"
    fi
    if echo $PLIST | /system/bin/grep --quiet "jp.pioneer.avsoft.android.icontrolav2014"; then
        dodis $CMD "jp.pioneer.avsoft.android.icontrolav2014/com.google.android.gms.ads.social.GcmSchedulerWakeupService"
        dodis $CMD "jp.pioneer.avsoft.android.icontrolav2014/com.google.android.gms.ads.identifier.service.AdvertisingIdNotificationService"
        dodis $CMD "jp.pioneer.avsoft.android.icontrolav2014/com.google.android.gms.ads.measurement.GmpConversionTrackingBrokerService"
        dodis $CMD "jp.pioneer.avsoft.android.icontrolav2014/com.google.android.gms.ads.AdRequestBrokerService"
        dodis $CMD "jp.pioneer.avsoft.android.icontrolav2014/com.google.android.gms.ads.cache.CacheBrokerService"
        dodis $CMD "jp.pioneer.avsoft.android.icontrolav2014/com.google.android.gms.ads.settings.AdsSettingsActivity"
        dodis $CMD "jp.pioneer.avsoft.android.icontrolav2014/com.google.android.gms.adsidentity.settings.AdsIdentitySettingsActivity"
        dodis $CMD "jp.pioneer.avsoft.android.icontrolav2014/com.google.android.gms.adsidentity.settings.AdsIdentityPersonalizationActivity"
        dodis $CMD "jp.pioneer.avsoft.android.icontrolav2014/com.google.android.gms.analytics.internal.PlayLogReportingService"
    fi
    if echo $PLIST | /system/bin/grep --quiet "com.teslacoilsw.launcher"; then
        dodis $CMD "com.teslacoilsw.launcher/com.teslacoilsw.launcher.NovaAccessibilityService"
        dodis $CMD "com.teslacoilsw.launcher/com.android.launcher3.MemoryDumpActivity"
    fi
fi

# next applies to ALL packages which we selected
for i in $PLIST; do
    dodis $CMD "$i/com.braintreepayments.api.internal.AnalyticsIntentService"
    dodis $CMD "$i/com.crashlytics.android.CrashlyticsInitProvider"
    dodis $CMD "$i/com.facebook.ads.internal.ipc.AdsMessengerService"
    dodis $CMD "$i/com.facebook.ads.internal.ipc.AdsProcessPriorityService"
    dodis $CMD "$i/com.facebook.internal.FacebookInitProvider"
    dodis $CMD "$i/com.google.analytics.tracking.android.CampaignTrackingReceiver"
    dodis $CMD "$i/com.google.analytics.tracking.android.CampaignTrackingService"
    dodis $CMD "$i/com.google.android.gms.ads.AdActivity"
    dodis $CMD "$i/com.google.android.gms.ads.AdService"
    dodis $CMD "$i/com.google.android.gms.ads.MobileAdsInitProvider"
    dodis $CMD "$i/com.google.android.gms.ads.jams.NegotiationService"
    dodis $CMD "$i/com.google.android.gms.ads.social.GcmSchedulerWakeupService"
    dodis $CMD "$i/com.google.android.gms.ads.identifier.service.AdvertisingIdNotificationService"
    dodis $CMD "$i/com.google.android.gms.ads.measurement.GmpConversionTrackingBrokerService"
    dodis $CMD "$i/com.google.android.gms.ads.AdRequestBrokerService"
    dodis $CMD "$i/com.google.android.gms.ads.cache.CacheBrokerService"
    dodis $CMD "$i/com.google.android.gms.ads.identifier.service.AdIdProviderService"
    dodis $CMD "$i/com.google.android.gms.ads.identifier.service.AdvertisingIdService"
    dodis $CMD "$i/com.google.android.gms.ads.settings.AdsSettingsActivity"
    dodis $CMD "$i/com.google.android.gms.adsidentity.settings.AdsIdentitySettingsActivity"
    dodis $CMD "$i/com.google.android.gms.adsidentity.settings.AdsIdentityPersonalizationActivity"
    dodis $CMD "$i/com.google.android.gms.analytics.AnalyticsJobService"
    dodis $CMD "$i/com.google.android.gms.analytics.AnalyticsReceiver"
    dodis $CMD "$i/com.google.android.gms.analytics.AnalyticsService"
    dodis $CMD "$i/com.google.android.gms.analytics.AnalyticsTaskService"
    dodis $CMD "$i/com.google.android.gms.analytics.CampaignTrackingReceiver"
    dodis $CMD "$i/com.google.android.gms.analytics.CampaignTrackingService"
    dodis $CMD "$i/com.google.android.gms.analytics.service.AnalyticsService"
    dodis $CMD "$i/com.google.android.gms.analytics.internal.PlayLogReportingService"
    dodis $CMD "$i/com.google.android.gms.measurement.AppMeasurementContentProvider"
    dodis $CMD "$i/com.google.android.gms.measurement.AppMeasurementInstallReferrerReceiver"
    dodis $CMD "$i/com.google.android.gms.measurement.AppMeasurementJobService"
    dodis $CMD "$i/com.google.android.gms.measurement.AppMeasurementReceiver"
    dodis $CMD "$i/com.google.android.gms.measurement.AppMeasurementService"
    dodis $CMD "$i/com.google.android.gms.measurement.PackageMeasurementReceiver"
    dodis $CMD "$i/com.google.firebase.auth.api.gms.service.FirebaseAuthService"
    dodis $CMD "$i/com.google.firebase.iid.FirebaseInstanceIdService"
    dodis $CMD "$i/com.google.firebase.perf.provider.FirebasePerfProvider"
    dodis $CMD "$i/com.google.firebase.provider.FirebasePerfProvider"
    dodis $CMD "$i/com.google.firebase.messaging.FirebaseMessagingService"
    dodis $CMD "$i/com.google.firebase.messaging.FirebaseMessagingListenerService"
done

# reenable services (otherwise apps will not work)
pm enable "com.devhd.feedly/com.facebook.internal.FacebookInitProvider" > /dev/null
pm enable "com.strava/com.facebook.internal.FacebookInitProvider" > /dev/null

echo "*** $DCNT disabled, $ECNT enabled, $ERR errors (probably services not present)"
